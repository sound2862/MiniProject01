using Oracle.ManagedDataAccess.Client;
using System;

namespace MiniProject01
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Menu();
        }
        static void Menu()
        {
            int choice;
            string strConn = "Data Source=(DESCRIPTION=" +
                             "(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)" +
                             "(HOST=localhost)(PORT=1521)))" +
                             "(CONNECT_DATA=(SERVER=DEDICATED)" +
                             "(SERVICE_NAME=xe)));" +
                             "User Id=scott;Password=TIGER;";

            using (OracleConnection conn = new OracleConnection(strConn))
            {
                conn.Open();
                OracleCommand cmd = new OracleCommand { Connection = conn };

                do
                {
                    Console.WriteLine("=======================");
                    Console.WriteLine("라면 제조 관리 시스템");
                    Console.WriteLine("0. 초기화");
                    Console.WriteLine("1. 재료 관리");
                    Console.WriteLine("2. 제조 공정 관리");
                    Console.WriteLine("3. 재고 관리");
                    Console.WriteLine("4. 출하 관리");
                    Console.WriteLine("5. 종료");
                    Console.Write("선택: ");

                    choice = int.Parse(Console.ReadLine());

                    switch (choice)
                    {
                        case 0:
                            Reset_Database(cmd);
                            break;  //초기화
                        case 1:
                            Manage_Ingredients(cmd);
                            break;  //재료
                        case 2:
                            Manage_Processes(cmd);
                            break;  //제조공정
                        case 3:
                            Manage_Inventory(cmd);
                            break;  //재고
                        case 4:
                            Manage_Shipments(cmd);
                            break;  //출하
                        case 5:
                            Console.WriteLine("프로그램을 종료합니다.");
                            cmd.CommandText = "COMMIT";
                            break;  //종료
                        default:
                            Console.WriteLine("잘못 입력하셨습니다.");
                            break;
                    }
                } while (choice != 5);
            }
        }
        static void Reset_Database(OracleCommand cmd)
        {
            try { cmd.CommandText = "DROP TABLE Shipments"; cmd.ExecuteNonQuery(); } catch (OracleException) { }
            try { cmd.CommandText = "DROP TABLE Products"; cmd.ExecuteNonQuery(); } catch (OracleException) { }
            try { cmd.CommandText = "DROP TABLE Processes"; cmd.ExecuteNonQuery(); } catch (OracleException) { }
            try { cmd.CommandText = "DROP TABLE Ingredients"; cmd.ExecuteNonQuery(); } catch (OracleException) { }
            try { cmd.CommandText = "DROP SEQUENCE seq_ingredients"; cmd.ExecuteNonQuery(); } catch (OracleException) { }
            try { cmd.CommandText = "DROP SEQUENCE seq_processes"; cmd.ExecuteNonQuery(); } catch (OracleException) { }
            try { cmd.CommandText = "DROP SEQUENCE seq_products"; cmd.ExecuteNonQuery(); } catch (OracleException) { }
            try { cmd.CommandText = "DROP SEQUENCE seq_shipments"; cmd.ExecuteNonQuery(); } catch (OracleException) { }

            cmd.CommandText = "CREATE SEQUENCE seq_ingredients START WITH 1 INCREMENT BY 1 NOCACHE";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "CREATE SEQUENCE seq_processes START WITH 1 INCREMENT BY 1 NOCACHE";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "CREATE SEQUENCE seq_products START WITH 1 INCREMENT BY 1 NOCACHE";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "CREATE SEQUENCE seq_shipments START WITH 1 INCREMENT BY 1 NOCACHE";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "CREATE TABLE Ingredients ( " +
                              "IngredientID NUMBER PRIMARY KEY, " +
                              "Name VARCHAR2(50) NOT NULL, " +
                              "Quantity NUMBER NOT NULL)";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "CREATE TABLE Processes ( " +
                              "ProcessID NUMBER PRIMARY KEY, " +
                              "Name VARCHAR2(50) NOT NULL, " +
                              "Status VARCHAR2(20) NOT NULL)";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "CREATE TABLE Products ( " +
                              "ProductID NUMBER PRIMARY KEY, " +
                              "Name VARCHAR2(50) NOT NULL, " +
                              "Quantity NUMBER NOT NULL)";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "CREATE TABLE Shipments ( " +
                              "ShipmentID NUMBER PRIMARY KEY, " +
                              "ProductID NUMBER NOT NULL, " +
                              "Quantity NUMBER NOT NULL, " +
                              "ShipmentDate DATE NOT NULL, " +
                              "FOREIGN KEY (ProductID) REFERENCES Products(ProductID) ON DELETE CASCADE)";
            cmd.ExecuteNonQuery();

            // 트리거
            cmd.CommandText = "CREATE OR REPLACE TRIGGER trg_ingredients BEFORE INSERT ON Ingredients " +
                              "FOR EACH ROW " +
                              "BEGIN " +
                              "SELECT seq_ingredients.NEXTVAL INTO :NEW.IngredientID FROM dual; " +
                              "END;";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "CREATE OR REPLACE TRIGGER trg_processes BEFORE INSERT ON Processes " +
                              "FOR EACH ROW " +
                              "BEGIN " +
                              "SELECT seq_processes.NEXTVAL INTO :NEW.ProcessID FROM dual; " +
                              "END;";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "CREATE OR REPLACE TRIGGER trg_products BEFORE INSERT ON Products " +
                              "FOR EACH ROW " +
                              "BEGIN " +
                              "SELECT seq_products.NEXTVAL INTO :NEW.ProductID FROM dual; " +
                              "END;";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "CREATE OR REPLACE TRIGGER trg_shipments BEFORE INSERT ON Shipments " +
                              "FOR EACH ROW " +
                              "BEGIN " +
                              "SELECT seq_shipments.NEXTVAL INTO :NEW.ShipmentID FROM dual; " +
                              "END;";
            cmd.ExecuteNonQuery();

            // 기본적인거 넣기
            cmd.CommandText = "INSERT INTO Ingredients (Name, Quantity) VALUES ('A밀가루', 1000)";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Ingredients (Name, Quantity) VALUES ('B밀가루', 1000)";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Ingredients (Name, Quantity) VALUES ('물', 500)";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Ingredients (Name, Quantity) VALUES ('소금', 20)";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Ingredients (Name, Quantity) VALUES ('기름', 30)";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Ingredients (Name, Quantity) VALUES ('A스프', 50)";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Ingredients (Name, Quantity) VALUES ('B스프', 50)";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "INSERT INTO Processes (Name, Status) VALUES ('반죽', 'Pending')";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Processes (Name, Status) VALUES ('면 뽑기', 'Pending')";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Processes (Name, Status) VALUES ('건조', 'Pending')";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Processes (Name, Status) VALUES ('튀김', 'Pending')";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Processes (Name, Status) VALUES ('포장', 'Pending')";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "INSERT INTO Products (Name, Quantity) VALUES ('신라면', 100)";
            cmd.ExecuteNonQuery();
            cmd.CommandText = "INSERT INTO Products (Name, Quantity) VALUES ('삼양라면', 50)";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "INSERT INTO Shipments (ProductID, Quantity, ShipmentDate) VALUES (1, 50, TO_DATE('2024-08-05', 'YYYY-MM-DD'))";
            cmd.ExecuteNonQuery();

            Console.WriteLine("DB가 초기화되었습니다.");
        }
        static void Manage_Ingredients(OracleCommand cmd)
        {
            int choice;
            do
            {
                Console.WriteLine("=======================");
                Console.WriteLine("재료 관리");
                Console.WriteLine("1. 재료 추가");
                Console.WriteLine("2. 재료 수정");
                Console.WriteLine("3. 재료 삭제");
                Console.WriteLine("4. 재료 조회");
                Console.WriteLine("5. 이전 메뉴");
                Console.Write("선택: ");
                choice = int.Parse(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        Add_Ingredient(cmd);
                        break;  //추가
                    case 2:
                        Update_Ingredient(cmd);
                        break;  //수정
                    case 3:
                        Delete_Ingredient(cmd);
                        break;  //삭제
                    case 4:
                        SelectAll_Ingredients(cmd);
                        break;  //조회
                    case 5:
                        break;  //종료(이전으로)
                    default:
                        Console.WriteLine("잘못 입력하셨습니다.");
                        break;
                }
            } while (choice != 5);
        }
        static void Manage_Processes(OracleCommand cmd)
        {
            int choice;
            do
            {
                Console.WriteLine("=======================");
                Console.WriteLine("제조 공정 관리");
                Console.WriteLine("1. 공정 추가");
                Console.WriteLine("2. 공정 상태 업데이트");
                Console.WriteLine("3. 공정 조회");
                Console.WriteLine("4. 이전 메뉴");
                Console.Write("선택: ");
                choice = int.Parse(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        Add_Process(cmd);
                        break;
                    case 2:
                        Update_Process(cmd);
                        break;
                    case 3:
                        SelectAll_Processes(cmd);
                        break;
                    case 4:
                        break;
                    default:
                        Console.WriteLine("잘못 입력하셨습니다.");
                        break;
                }
            } while (choice != 4);
        }
        static void Manage_Inventory(OracleCommand cmd)
        {
            int choice;
            do
            {
                Console.WriteLine("=======================");
                Console.WriteLine("재고 관리");
                Console.WriteLine("1. 완제품 추가");
                Console.WriteLine("2. 완제품 수정");
                Console.WriteLine("3. 완제품 삭제");
                Console.WriteLine("4. 완제품 조회");
                Console.WriteLine("5. 이전 메뉴");
                Console.Write("선택: ");
                choice = int.Parse(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        Add_Product(cmd);
                        break;
                    case 2:
                        Update_Product(cmd);
                        break;
                    case 3:
                        Delete_Product(cmd);
                        break;
                    case 4:
                        SelectAll_Products(cmd);
                        break;
                    case 5:
                        break;
                    default:
                        Console.WriteLine("잘못 입력하셨습니다.");
                        break;
                }
            } while (choice != 5);
        }
        static void Manage_Shipments(OracleCommand cmd)
        {
            int choice;
            do
            {
                Console.WriteLine("=======================");
                Console.WriteLine("출하 관리");
                Console.WriteLine("1. 출하 예정 등록");
                Console.WriteLine("2. 출하 예정 조회");
                Console.WriteLine("3. 출하품 확정");
                Console.WriteLine("4. 이전 메뉴");
                Console.Write("선택: ");
                choice = int.Parse(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        Add_Shipment(cmd);
                        break;
                    case 2:
                        SelectAll_Shipments(cmd);
                        break;
                    case 3:
                        Confirm_Shipment(cmd);
                        break;
                    case 4:
                        break;
                    default:
                        Console.WriteLine("잘못 입력하셨습니다.");
                        break;
                }
            } while (choice != 4);
        }
        static void Add_Ingredient(OracleCommand cmd)
        {
            Console.Write("재료 이름: ");
            string name = Console.ReadLine();
            Console.Write("재료 수량: ");
            int quantity = int.Parse(Console.ReadLine());

            cmd.CommandText = "INSERT INTO Ingredients (Name, Quantity) VALUES (:Name, :Quantity)";
            cmd.Parameters.Clear();
            cmd.Parameters.Add(new OracleParameter("Name", name));
            cmd.Parameters.Add(new OracleParameter("Quantity", quantity));
            cmd.ExecuteNonQuery();
            Console.WriteLine("재료가 추가되었습니다.");
        }
        static void Add_Process(OracleCommand cmd)
        {
            Console.Write("공정 이름: ");
            string name = Console.ReadLine();
            string status = "Pending";

            cmd.CommandText = "INSERT INTO Processes (Name, Status) " +
                              "VALUES (:Name, :Status)";
            cmd.Parameters.Clear();
            cmd.Parameters.Add(new OracleParameter("Name", name));
            cmd.Parameters.Add(new OracleParameter("Status", status));
            cmd.ExecuteNonQuery();
            Console.WriteLine("공정이 추가되었습니다.");
        }
        static void Add_Product(OracleCommand cmd)
        {
            Console.Write("완제품 이름: ");
            string name = Console.ReadLine();
            Console.Write("완제품 수량: ");
            int quantity = int.Parse(Console.ReadLine());

            cmd.CommandText = "INSERT INTO Products (Name, Quantity) " +
                              "VALUES (:Name, :Quantity)";
            cmd.Parameters.Clear();
            cmd.Parameters.Add(new OracleParameter("Name", name));
            cmd.Parameters.Add(new OracleParameter("Quantity", quantity));
            cmd.ExecuteNonQuery();
            Console.WriteLine("완제품이 추가되었습니다.");
        }
        static void Add_Shipment(OracleCommand cmd)
        {
            Console.Write("출하할 완제품 ID: ");
            int productId = int.Parse(Console.ReadLine());
            Console.Write("출하 수량: ");
            int quantity = int.Parse(Console.ReadLine());
            DateTime shipmentDate = DateTime.Now;

            cmd.Parameters.Clear();

            cmd.Parameters.Add(new OracleParameter("ProductID", productId));
            cmd.Parameters.Add(new OracleParameter("Quantity", quantity));
            cmd.Parameters.Add(new OracleParameter("ShipmentDate", shipmentDate));

            cmd.CommandText = "INSERT INTO Shipments (ProductID, Quantity, ShipmentDate) " +
                              "VALUES (:ProductID, :Quantity, :ShipmentDate)";
            cmd.ExecuteNonQuery();

            Console.WriteLine("출하가 추가되었습니다.");
        }
        static void Update_Ingredient(OracleCommand cmd)
        {
            Console.Write("수정할 재료 ID: ");
            int id = int.Parse(Console.ReadLine());
            Console.Write("새 재료 이름: ");
            string name = Console.ReadLine();
            Console.Write("새 재료 수량: ");
            int quantity = int.Parse(Console.ReadLine());

            cmd.CommandText = "UPDATE Ingredients " +
                              "SET Name = :Name, Quantity = :Quantity " +
                              "WHERE IngredientID = :IngredientID";
            cmd.Parameters.Clear();
            cmd.Parameters.Add(new OracleParameter("Name", name));
            cmd.Parameters.Add(new OracleParameter("Quantity", quantity));
            cmd.Parameters.Add(new OracleParameter("IngredientID", id));
            cmd.ExecuteNonQuery();
            Console.WriteLine("재료가 수정되었습니다.");
        }
        static void Update_Process(OracleCommand cmd)
        {
            Console.Write("수정할 공정 ID: ");
            int id = int.Parse(Console.ReadLine());

            Console.WriteLine("새 상태를 선택하세요:");
            Console.WriteLine("1. Pending");
            Console.WriteLine("2. In Progress");
            Console.WriteLine("3. Completed");
            Console.Write("선택: ");
            int statusChoice = int.Parse(Console.ReadLine());

            string status;

            switch (statusChoice)
            {
                case 1:
                    status = "Pending";
                    break;
                case 2:
                    status = "In Progress";
                    break;
                case 3:
                    status = "Completed";
                    break;
                default:
                    Console.WriteLine("잘못된 선택입니다.");
                    return;
            }

            cmd.CommandText = "UPDATE Processes " +
                              "SET Status = :Status " +
                              "WHERE ProcessID = :ProcessID";
            cmd.Parameters.Clear();
            cmd.Parameters.Add(new OracleParameter("Status", status));
            cmd.Parameters.Add(new OracleParameter("ProcessID", id));
            cmd.ExecuteNonQuery();
            Console.WriteLine("공정 상태가 수정되었습니다.");
        }
        static void Update_Product(OracleCommand cmd)
        {
            Console.Write("수정할 완제품 ID: ");
            int id = int.Parse(Console.ReadLine());
            Console.Write("새 완제품 이름: ");
            string name = Console.ReadLine();
            Console.Write("새 완제품 수량: ");
            int quantity = int.Parse(Console.ReadLine());

            cmd.CommandText = "UPDATE Products " +
                              "SET Name = :Name, Quantity = :Quantity " +
                              "WHERE ProductID = :ProductID";
            cmd.Parameters.Clear();
            cmd.Parameters.Add(new OracleParameter("Name", name));
            cmd.Parameters.Add(new OracleParameter("Quantity", quantity));
            cmd.Parameters.Add(new OracleParameter("ProductID", id));
            cmd.ExecuteNonQuery();
            Console.WriteLine("완제품이 수정되었습니다.");
        }
        static void Delete_Ingredient(OracleCommand cmd)
        {
            Console.Write("삭제할 재료 ID: ");
            int id = int.Parse(Console.ReadLine());

            cmd.CommandText = "DELETE FROM Ingredients " +
                              "WHERE IngredientID = :IngredientID";
            cmd.Parameters.Clear();
            cmd.Parameters.Add(new OracleParameter("IngredientID", id));
            cmd.ExecuteNonQuery();
            Console.WriteLine("재료가 삭제되었습니다.");
        }
        static void Delete_Product(OracleCommand cmd)
        {
            Console.Write("삭제할 완제품 ID: ");
            int id = int.Parse(Console.ReadLine());

            cmd.CommandText = "SELECT COUNT(*) " +
                              "FROM Shipments " +
                              "WHERE ProductID = :ProductID";
            cmd.Parameters.Clear();
            cmd.Parameters.Add(new OracleParameter("ProductID", id));
            int cnt = Convert.ToInt32(cmd.ExecuteScalar());

            if (cnt > 0)
            {
                Console.WriteLine("출하 예정으로 등록된 상품입니다. 정말 삭제하시겠습니까? (Y/N)");
                string YN = Console.ReadLine().ToUpper();

                if (YN == "Y")
                {
                    cmd.CommandText = "DELETE FROM Products WHERE ProductID = :ProductID";
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add(new OracleParameter("ProductID", id));
                    cmd.ExecuteNonQuery();
                    Console.WriteLine("완제품이 삭제되었습니다.");
                }
                else
                {
                    Console.WriteLine("삭제가 취소되었습니다.");
                }
            }
            else
            {
                cmd.CommandText = "DELETE FROM Products WHERE ProductID = :ProductID";
                cmd.Parameters.Clear();
                cmd.Parameters.Add(new OracleParameter("ProductID", id));
                cmd.ExecuteNonQuery();
                Console.WriteLine("완제품이 삭제되었습니다.");
            }
        }
        static void SelectAll_Ingredients(OracleCommand cmd)
        {
            cmd.CommandText = "SELECT * FROM Ingredients";
            using (OracleDataReader reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    Console.WriteLine($"ID: {reader["IngredientID"]}, Name: {reader["Name"]}, Quantity: {reader["Quantity"]}");
                }
            }
        }
        static void SelectAll_Processes(OracleCommand cmd)
        {
            cmd.CommandText = "SELECT * FROM Processes";
            using (OracleDataReader reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    Console.WriteLine($"ID: {reader["ProcessID"]}, Name: {reader["Name"]}, Status: {reader["Status"]}");
                }
            }
        }
        static void SelectAll_Products(OracleCommand cmd)
        {
            cmd.CommandText = "SELECT * FROM Products";
            using (OracleDataReader reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    Console.WriteLine($"ID: {reader["ProductID"]}, Name: {reader["Name"]}, Quantity: {reader["Quantity"]}");
                }
            }
        }
        static void SelectAll_Shipments(OracleCommand cmd)
        {
            cmd.CommandText = "SELECT s.ShipmentID, s.ProductID, p.Name AS ProductName, s.Quantity, s.ShipmentDate " +
                              "FROM Shipments s " +
                              "JOIN Products p ON s.ProductID = p.ProductID";
            using (OracleDataReader reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    Console.WriteLine($"ID: {reader["ShipmentID"]}, Product ID: {reader["ProductID"]}, Product Name: {reader["ProductName"]}, Quantity: {reader["Quantity"]}, Date: {reader["ShipmentDate"]}");
                }
            }
        }
        static void Confirm_Shipment(OracleCommand cmd)
        {
            Console.Write("출하를 확정할 ID를 입력하세요: ");
            int shipmentId = int.Parse(Console.ReadLine());
            //각 테이블에서 출하한거 삭제하기

            cmd.CommandText = "UPDATE Products p " +
                             "SET p.Quantity = p.Quantity - (SELECT s.Quantity FROM Shipments s WHERE s.ShipmentID = :ShipmentID) " +
                             "WHERE p.ProductID = (SELECT s.ProductID FROM Shipments s WHERE s.ShipmentID = :ShipmentID)";
            cmd.Parameters.Clear();
            cmd.Parameters.Add(new OracleParameter("ShipmentID", shipmentId));
            cmd.ExecuteNonQuery();

            cmd.CommandText = "DELETE FROM Shipments WHERE ShipmentID = :ShipmentID";
            cmd.Parameters.Clear();
            cmd.Parameters.Add(new OracleParameter("ShipmentID", shipmentId));
            cmd.ExecuteNonQuery();



            Console.WriteLine("출하품이 확정되었습니다.");
        }
    }
}
